// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go
//
// Generated by this command:
//
//	mockgen -source=./client.go -package=iwftest -destination=../iwftest/client.go
//
// Package iwftest is a generated GoMock package.
package iwftest

import (
	context "context"
	reflect "reflect"

	iwfidl "github.com/mitchjtn/iwf-golang-sdk/gen/iwfidl"
	iwf "github.com/mitchjtn/iwf-golang-sdk/iwf"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DescribeWorkflow mocks base method.
func (m *MockClient) DescribeWorkflow(ctx context.Context, workflowId, workflowRunId string) (*iwf.WorkflowInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkflow", ctx, workflowId, workflowRunId)
	ret0, _ := ret[0].(*iwf.WorkflowInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkflow indicates an expected call of DescribeWorkflow.
func (mr *MockClientMockRecorder) DescribeWorkflow(ctx, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkflow", reflect.TypeOf((*MockClient)(nil).DescribeWorkflow), ctx, workflowId, workflowRunId)
}

// GetAllWorkflowDataAttributes mocks base method.
func (m *MockClient) GetAllWorkflowDataAttributes(ctx context.Context, workflowId, workflowRunId string) (map[string]iwf.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWorkflowDataAttributes", ctx, workflowId, workflowRunId)
	ret0, _ := ret[0].(map[string]iwf.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWorkflowDataAttributes indicates an expected call of GetAllWorkflowDataAttributes.
func (mr *MockClientMockRecorder) GetAllWorkflowDataAttributes(ctx, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWorkflowDataAttributes", reflect.TypeOf((*MockClient)(nil).GetAllWorkflowDataAttributes), ctx, workflowId, workflowRunId)
}

// GetAllWorkflowSearchAttributes mocks base method.
func (m *MockClient) GetAllWorkflowSearchAttributes(ctx context.Context, workflow iwf.ObjectWorkflow, workflowId, workflowRunId string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWorkflowSearchAttributes", ctx, workflow, workflowId, workflowRunId)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWorkflowSearchAttributes indicates an expected call of GetAllWorkflowSearchAttributes.
func (mr *MockClientMockRecorder) GetAllWorkflowSearchAttributes(ctx, workflow, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWorkflowSearchAttributes", reflect.TypeOf((*MockClient)(nil).GetAllWorkflowSearchAttributes), ctx, workflow, workflowId, workflowRunId)
}

// GetComplexWorkflowResults mocks base method.
func (m *MockClient) GetComplexWorkflowResults(ctx context.Context, workflowId, workflowRunId string) ([]iwfidl.StateCompletionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplexWorkflowResults", ctx, workflowId, workflowRunId)
	ret0, _ := ret[0].([]iwfidl.StateCompletionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplexWorkflowResults indicates an expected call of GetComplexWorkflowResults.
func (mr *MockClientMockRecorder) GetComplexWorkflowResults(ctx, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplexWorkflowResults", reflect.TypeOf((*MockClient)(nil).GetComplexWorkflowResults), ctx, workflowId, workflowRunId)
}

// GetSimpleWorkflowResult mocks base method.
func (m *MockClient) GetSimpleWorkflowResult(ctx context.Context, workflowId, workflowRunId string, resultPtr any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimpleWorkflowResult", ctx, workflowId, workflowRunId, resultPtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSimpleWorkflowResult indicates an expected call of GetSimpleWorkflowResult.
func (mr *MockClientMockRecorder) GetSimpleWorkflowResult(ctx, workflowId, workflowRunId, resultPtr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimpleWorkflowResult", reflect.TypeOf((*MockClient)(nil).GetSimpleWorkflowResult), ctx, workflowId, workflowRunId, resultPtr)
}

// GetWorkflowDataAttributes mocks base method.
func (m *MockClient) GetWorkflowDataAttributes(ctx context.Context, workflow iwf.ObjectWorkflow, workflowId, workflowRunId string, keys []string) (map[string]iwf.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowDataAttributes", ctx, workflow, workflowId, workflowRunId, keys)
	ret0, _ := ret[0].(map[string]iwf.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowDataAttributes indicates an expected call of GetWorkflowDataAttributes.
func (mr *MockClientMockRecorder) GetWorkflowDataAttributes(ctx, workflow, workflowId, workflowRunId, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowDataAttributes", reflect.TypeOf((*MockClient)(nil).GetWorkflowDataAttributes), ctx, workflow, workflowId, workflowRunId, keys)
}

// GetWorkflowSearchAttributes mocks base method.
func (m *MockClient) GetWorkflowSearchAttributes(ctx context.Context, workflow iwf.ObjectWorkflow, workflowId, workflowRunId string, keys []string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowSearchAttributes", ctx, workflow, workflowId, workflowRunId, keys)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowSearchAttributes indicates an expected call of GetWorkflowSearchAttributes.
func (mr *MockClientMockRecorder) GetWorkflowSearchAttributes(ctx, workflow, workflowId, workflowRunId, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowSearchAttributes", reflect.TypeOf((*MockClient)(nil).GetWorkflowSearchAttributes), ctx, workflow, workflowId, workflowRunId, keys)
}

// InvokeRPC mocks base method.
func (m *MockClient) InvokeRPC(ctx context.Context, workflowId, workflowRunId string, rpc iwf.RPC, input, outputPtr any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeRPC", ctx, workflowId, workflowRunId, rpc, input, outputPtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvokeRPC indicates an expected call of InvokeRPC.
func (mr *MockClientMockRecorder) InvokeRPC(ctx, workflowId, workflowRunId, rpc, input, outputPtr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeRPC", reflect.TypeOf((*MockClient)(nil).InvokeRPC), ctx, workflowId, workflowRunId, rpc, input, outputPtr)
}

// ResetWorkflow mocks base method.
func (m *MockClient) ResetWorkflow(ctx context.Context, workflowId, workflowRunId string, options *iwf.ResetWorkflowOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetWorkflow", ctx, workflowId, workflowRunId, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetWorkflow indicates an expected call of ResetWorkflow.
func (mr *MockClientMockRecorder) ResetWorkflow(ctx, workflowId, workflowRunId, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetWorkflow", reflect.TypeOf((*MockClient)(nil).ResetWorkflow), ctx, workflowId, workflowRunId, options)
}

// SearchWorkflow mocks base method.
func (m *MockClient) SearchWorkflow(ctx context.Context, request iwfidl.WorkflowSearchRequest) (*iwfidl.WorkflowSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWorkflow", ctx, request)
	ret0, _ := ret[0].(*iwfidl.WorkflowSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWorkflow indicates an expected call of SearchWorkflow.
func (mr *MockClientMockRecorder) SearchWorkflow(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWorkflow", reflect.TypeOf((*MockClient)(nil).SearchWorkflow), ctx, request)
}

// SignalWorkflow mocks base method.
func (m *MockClient) SignalWorkflow(ctx context.Context, workflow iwf.ObjectWorkflow, workflowId, workflowRunId, signalChannelName string, signalValue any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalWorkflow", ctx, workflow, workflowId, workflowRunId, signalChannelName, signalValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignalWorkflow indicates an expected call of SignalWorkflow.
func (mr *MockClientMockRecorder) SignalWorkflow(ctx, workflow, workflowId, workflowRunId, signalChannelName, signalValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalWorkflow", reflect.TypeOf((*MockClient)(nil).SignalWorkflow), ctx, workflow, workflowId, workflowRunId, signalChannelName, signalValue)
}

// SkipTimerByCommandId mocks base method.
func (m *MockClient) SkipTimerByCommandId(ctx context.Context, workflowId, workflowRunId string, workflowState iwf.WorkflowState, stateExecutionNumber int, timerCommandId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipTimerByCommandId", ctx, workflowId, workflowRunId, workflowState, stateExecutionNumber, timerCommandId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SkipTimerByCommandId indicates an expected call of SkipTimerByCommandId.
func (mr *MockClientMockRecorder) SkipTimerByCommandId(ctx, workflowId, workflowRunId, workflowState, stateExecutionNumber, timerCommandId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipTimerByCommandId", reflect.TypeOf((*MockClient)(nil).SkipTimerByCommandId), ctx, workflowId, workflowRunId, workflowState, stateExecutionNumber, timerCommandId)
}

// SkipTimerByCommandIndex mocks base method.
func (m *MockClient) SkipTimerByCommandIndex(ctx context.Context, workflowId, workflowRunId string, workflowState iwf.WorkflowState, stateExecutionNumber, timerCommandIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipTimerByCommandIndex", ctx, workflowId, workflowRunId, workflowState, stateExecutionNumber, timerCommandIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// SkipTimerByCommandIndex indicates an expected call of SkipTimerByCommandIndex.
func (mr *MockClientMockRecorder) SkipTimerByCommandIndex(ctx, workflowId, workflowRunId, workflowState, stateExecutionNumber, timerCommandIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipTimerByCommandIndex", reflect.TypeOf((*MockClient)(nil).SkipTimerByCommandIndex), ctx, workflowId, workflowRunId, workflowState, stateExecutionNumber, timerCommandIndex)
}

// StartWorkflow mocks base method.
func (m *MockClient) StartWorkflow(ctx context.Context, workflow iwf.ObjectWorkflow, workflowId string, timeoutSecs int32, input any, options *iwf.WorkflowOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflow", ctx, workflow, workflowId, timeoutSecs, input, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkflow indicates an expected call of StartWorkflow.
func (mr *MockClientMockRecorder) StartWorkflow(ctx, workflow, workflowId, timeoutSecs, input, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflow", reflect.TypeOf((*MockClient)(nil).StartWorkflow), ctx, workflow, workflowId, timeoutSecs, input, options)
}

// StopWorkflow mocks base method.
func (m *MockClient) StopWorkflow(ctx context.Context, workflowId, workflowRunId string, options *iwf.WorkflowStopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkflow", ctx, workflowId, workflowRunId, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopWorkflow indicates an expected call of StopWorkflow.
func (mr *MockClientMockRecorder) StopWorkflow(ctx, workflowId, workflowRunId, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflow", reflect.TypeOf((*MockClient)(nil).StopWorkflow), ctx, workflowId, workflowRunId, options)
}

// UpdateWorkflowConfig mocks base method.
func (m *MockClient) UpdateWorkflowConfig(ctx context.Context, workflowId, workflowRunId string, config iwfidl.WorkflowConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowConfig", ctx, workflowId, workflowRunId, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowConfig indicates an expected call of UpdateWorkflowConfig.
func (mr *MockClientMockRecorder) UpdateWorkflowConfig(ctx, workflowId, workflowRunId, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowConfig", reflect.TypeOf((*MockClient)(nil).UpdateWorkflowConfig), ctx, workflowId, workflowRunId, config)
}

// MockClientCommon is a mock of ClientCommon interface.
type MockClientCommon struct {
	ctrl     *gomock.Controller
	recorder *MockClientCommonMockRecorder
}

// MockClientCommonMockRecorder is the mock recorder for MockClientCommon.
type MockClientCommonMockRecorder struct {
	mock *MockClientCommon
}

// NewMockClientCommon creates a new mock instance.
func NewMockClientCommon(ctrl *gomock.Controller) *MockClientCommon {
	mock := &MockClientCommon{ctrl: ctrl}
	mock.recorder = &MockClientCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientCommon) EXPECT() *MockClientCommonMockRecorder {
	return m.recorder
}

// DescribeWorkflow mocks base method.
func (m *MockClientCommon) DescribeWorkflow(ctx context.Context, workflowId, workflowRunId string) (*iwf.WorkflowInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkflow", ctx, workflowId, workflowRunId)
	ret0, _ := ret[0].(*iwf.WorkflowInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkflow indicates an expected call of DescribeWorkflow.
func (mr *MockClientCommonMockRecorder) DescribeWorkflow(ctx, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkflow", reflect.TypeOf((*MockClientCommon)(nil).DescribeWorkflow), ctx, workflowId, workflowRunId)
}

// GetAllWorkflowDataAttributes mocks base method.
func (m *MockClientCommon) GetAllWorkflowDataAttributes(ctx context.Context, workflowId, workflowRunId string) (map[string]iwf.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWorkflowDataAttributes", ctx, workflowId, workflowRunId)
	ret0, _ := ret[0].(map[string]iwf.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWorkflowDataAttributes indicates an expected call of GetAllWorkflowDataAttributes.
func (mr *MockClientCommonMockRecorder) GetAllWorkflowDataAttributes(ctx, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWorkflowDataAttributes", reflect.TypeOf((*MockClientCommon)(nil).GetAllWorkflowDataAttributes), ctx, workflowId, workflowRunId)
}

// GetComplexWorkflowResults mocks base method.
func (m *MockClientCommon) GetComplexWorkflowResults(ctx context.Context, workflowId, workflowRunId string) ([]iwfidl.StateCompletionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplexWorkflowResults", ctx, workflowId, workflowRunId)
	ret0, _ := ret[0].([]iwfidl.StateCompletionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplexWorkflowResults indicates an expected call of GetComplexWorkflowResults.
func (mr *MockClientCommonMockRecorder) GetComplexWorkflowResults(ctx, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplexWorkflowResults", reflect.TypeOf((*MockClientCommon)(nil).GetComplexWorkflowResults), ctx, workflowId, workflowRunId)
}

// GetSimpleWorkflowResult mocks base method.
func (m *MockClientCommon) GetSimpleWorkflowResult(ctx context.Context, workflowId, workflowRunId string, resultPtr any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimpleWorkflowResult", ctx, workflowId, workflowRunId, resultPtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSimpleWorkflowResult indicates an expected call of GetSimpleWorkflowResult.
func (mr *MockClientCommonMockRecorder) GetSimpleWorkflowResult(ctx, workflowId, workflowRunId, resultPtr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimpleWorkflowResult", reflect.TypeOf((*MockClientCommon)(nil).GetSimpleWorkflowResult), ctx, workflowId, workflowRunId, resultPtr)
}

// ResetWorkflow mocks base method.
func (m *MockClientCommon) ResetWorkflow(ctx context.Context, workflowId, workflowRunId string, options *iwf.ResetWorkflowOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetWorkflow", ctx, workflowId, workflowRunId, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetWorkflow indicates an expected call of ResetWorkflow.
func (mr *MockClientCommonMockRecorder) ResetWorkflow(ctx, workflowId, workflowRunId, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetWorkflow", reflect.TypeOf((*MockClientCommon)(nil).ResetWorkflow), ctx, workflowId, workflowRunId, options)
}

// SearchWorkflow mocks base method.
func (m *MockClientCommon) SearchWorkflow(ctx context.Context, request iwfidl.WorkflowSearchRequest) (*iwfidl.WorkflowSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWorkflow", ctx, request)
	ret0, _ := ret[0].(*iwfidl.WorkflowSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWorkflow indicates an expected call of SearchWorkflow.
func (mr *MockClientCommonMockRecorder) SearchWorkflow(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWorkflow", reflect.TypeOf((*MockClientCommon)(nil).SearchWorkflow), ctx, request)
}

// StopWorkflow mocks base method.
func (m *MockClientCommon) StopWorkflow(ctx context.Context, workflowId, workflowRunId string, options *iwf.WorkflowStopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkflow", ctx, workflowId, workflowRunId, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopWorkflow indicates an expected call of StopWorkflow.
func (mr *MockClientCommonMockRecorder) StopWorkflow(ctx, workflowId, workflowRunId, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflow", reflect.TypeOf((*MockClientCommon)(nil).StopWorkflow), ctx, workflowId, workflowRunId, options)
}

// UpdateWorkflowConfig mocks base method.
func (m *MockClientCommon) UpdateWorkflowConfig(ctx context.Context, workflowId, workflowRunId string, config iwfidl.WorkflowConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowConfig", ctx, workflowId, workflowRunId, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowConfig indicates an expected call of UpdateWorkflowConfig.
func (mr *MockClientCommonMockRecorder) UpdateWorkflowConfig(ctx, workflowId, workflowRunId, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowConfig", reflect.TypeOf((*MockClientCommon)(nil).UpdateWorkflowConfig), ctx, workflowId, workflowRunId, config)
}

// MockUnregisteredClient is a mock of UnregisteredClient interface.
type MockUnregisteredClient struct {
	ctrl     *gomock.Controller
	recorder *MockUnregisteredClientMockRecorder
}

// MockUnregisteredClientMockRecorder is the mock recorder for MockUnregisteredClient.
type MockUnregisteredClientMockRecorder struct {
	mock *MockUnregisteredClient
}

// NewMockUnregisteredClient creates a new mock instance.
func NewMockUnregisteredClient(ctrl *gomock.Controller) *MockUnregisteredClient {
	mock := &MockUnregisteredClient{ctrl: ctrl}
	mock.recorder = &MockUnregisteredClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnregisteredClient) EXPECT() *MockUnregisteredClientMockRecorder {
	return m.recorder
}

// DescribeWorkflow mocks base method.
func (m *MockUnregisteredClient) DescribeWorkflow(ctx context.Context, workflowId, workflowRunId string) (*iwf.WorkflowInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkflow", ctx, workflowId, workflowRunId)
	ret0, _ := ret[0].(*iwf.WorkflowInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkflow indicates an expected call of DescribeWorkflow.
func (mr *MockUnregisteredClientMockRecorder) DescribeWorkflow(ctx, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkflow", reflect.TypeOf((*MockUnregisteredClient)(nil).DescribeWorkflow), ctx, workflowId, workflowRunId)
}

// GetAllWorkflowDataAttributes mocks base method.
func (m *MockUnregisteredClient) GetAllWorkflowDataAttributes(ctx context.Context, workflowId, workflowRunId string) (map[string]iwf.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWorkflowDataAttributes", ctx, workflowId, workflowRunId)
	ret0, _ := ret[0].(map[string]iwf.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWorkflowDataAttributes indicates an expected call of GetAllWorkflowDataAttributes.
func (mr *MockUnregisteredClientMockRecorder) GetAllWorkflowDataAttributes(ctx, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWorkflowDataAttributes", reflect.TypeOf((*MockUnregisteredClient)(nil).GetAllWorkflowDataAttributes), ctx, workflowId, workflowRunId)
}

// GetComplexWorkflowResults mocks base method.
func (m *MockUnregisteredClient) GetComplexWorkflowResults(ctx context.Context, workflowId, workflowRunId string) ([]iwfidl.StateCompletionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplexWorkflowResults", ctx, workflowId, workflowRunId)
	ret0, _ := ret[0].([]iwfidl.StateCompletionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplexWorkflowResults indicates an expected call of GetComplexWorkflowResults.
func (mr *MockUnregisteredClientMockRecorder) GetComplexWorkflowResults(ctx, workflowId, workflowRunId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplexWorkflowResults", reflect.TypeOf((*MockUnregisteredClient)(nil).GetComplexWorkflowResults), ctx, workflowId, workflowRunId)
}

// GetSimpleWorkflowResult mocks base method.
func (m *MockUnregisteredClient) GetSimpleWorkflowResult(ctx context.Context, workflowId, workflowRunId string, resultPtr any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimpleWorkflowResult", ctx, workflowId, workflowRunId, resultPtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSimpleWorkflowResult indicates an expected call of GetSimpleWorkflowResult.
func (mr *MockUnregisteredClientMockRecorder) GetSimpleWorkflowResult(ctx, workflowId, workflowRunId, resultPtr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimpleWorkflowResult", reflect.TypeOf((*MockUnregisteredClient)(nil).GetSimpleWorkflowResult), ctx, workflowId, workflowRunId, resultPtr)
}

// GetWorkflowDataAttributes mocks base method.
func (m *MockUnregisteredClient) GetWorkflowDataAttributes(ctx context.Context, workflowId, workflowRunId string, keys []string) (map[string]iwf.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowDataAttributes", ctx, workflowId, workflowRunId, keys)
	ret0, _ := ret[0].(map[string]iwf.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowDataAttributes indicates an expected call of GetWorkflowDataAttributes.
func (mr *MockUnregisteredClientMockRecorder) GetWorkflowDataAttributes(ctx, workflowId, workflowRunId, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowDataAttributes", reflect.TypeOf((*MockUnregisteredClient)(nil).GetWorkflowDataAttributes), ctx, workflowId, workflowRunId, keys)
}

// GetWorkflowSearchAttributes mocks base method.
func (m *MockUnregisteredClient) GetWorkflowSearchAttributes(ctx context.Context, workflowId, workflowRunId string, keys []iwfidl.SearchAttributeKeyAndType) (map[string]iwfidl.SearchAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowSearchAttributes", ctx, workflowId, workflowRunId, keys)
	ret0, _ := ret[0].(map[string]iwfidl.SearchAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowSearchAttributes indicates an expected call of GetWorkflowSearchAttributes.
func (mr *MockUnregisteredClientMockRecorder) GetWorkflowSearchAttributes(ctx, workflowId, workflowRunId, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowSearchAttributes", reflect.TypeOf((*MockUnregisteredClient)(nil).GetWorkflowSearchAttributes), ctx, workflowId, workflowRunId, keys)
}

// InvokeRPCByName mocks base method.
func (m *MockUnregisteredClient) InvokeRPCByName(ctx context.Context, workflowId, workflowRunId, rpcName string, input, outputPtr any, rpcOptions *iwf.RPCOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeRPCByName", ctx, workflowId, workflowRunId, rpcName, input, outputPtr, rpcOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvokeRPCByName indicates an expected call of InvokeRPCByName.
func (mr *MockUnregisteredClientMockRecorder) InvokeRPCByName(ctx, workflowId, workflowRunId, rpcName, input, outputPtr, rpcOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeRPCByName", reflect.TypeOf((*MockUnregisteredClient)(nil).InvokeRPCByName), ctx, workflowId, workflowRunId, rpcName, input, outputPtr, rpcOptions)
}

// ResetWorkflow mocks base method.
func (m *MockUnregisteredClient) ResetWorkflow(ctx context.Context, workflowId, workflowRunId string, options *iwf.ResetWorkflowOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetWorkflow", ctx, workflowId, workflowRunId, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetWorkflow indicates an expected call of ResetWorkflow.
func (mr *MockUnregisteredClientMockRecorder) ResetWorkflow(ctx, workflowId, workflowRunId, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetWorkflow", reflect.TypeOf((*MockUnregisteredClient)(nil).ResetWorkflow), ctx, workflowId, workflowRunId, options)
}

// SearchWorkflow mocks base method.
func (m *MockUnregisteredClient) SearchWorkflow(ctx context.Context, request iwfidl.WorkflowSearchRequest) (*iwfidl.WorkflowSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWorkflow", ctx, request)
	ret0, _ := ret[0].(*iwfidl.WorkflowSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWorkflow indicates an expected call of SearchWorkflow.
func (mr *MockUnregisteredClientMockRecorder) SearchWorkflow(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWorkflow", reflect.TypeOf((*MockUnregisteredClient)(nil).SearchWorkflow), ctx, request)
}

// SignalWorkflow mocks base method.
func (m *MockUnregisteredClient) SignalWorkflow(ctx context.Context, workflowId, workflowRunId, signalChannelName string, signalValue any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalWorkflow", ctx, workflowId, workflowRunId, signalChannelName, signalValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignalWorkflow indicates an expected call of SignalWorkflow.
func (mr *MockUnregisteredClientMockRecorder) SignalWorkflow(ctx, workflowId, workflowRunId, signalChannelName, signalValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalWorkflow", reflect.TypeOf((*MockUnregisteredClient)(nil).SignalWorkflow), ctx, workflowId, workflowRunId, signalChannelName, signalValue)
}

// SkipTimerByCommandId mocks base method.
func (m *MockUnregisteredClient) SkipTimerByCommandId(ctx context.Context, workflowId, workflowRunId, workflowStateId string, stateExecutionNumber int, timerCommandId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipTimerByCommandId", ctx, workflowId, workflowRunId, workflowStateId, stateExecutionNumber, timerCommandId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SkipTimerByCommandId indicates an expected call of SkipTimerByCommandId.
func (mr *MockUnregisteredClientMockRecorder) SkipTimerByCommandId(ctx, workflowId, workflowRunId, workflowStateId, stateExecutionNumber, timerCommandId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipTimerByCommandId", reflect.TypeOf((*MockUnregisteredClient)(nil).SkipTimerByCommandId), ctx, workflowId, workflowRunId, workflowStateId, stateExecutionNumber, timerCommandId)
}

// SkipTimerByCommandIndex mocks base method.
func (m *MockUnregisteredClient) SkipTimerByCommandIndex(ctx context.Context, workflowId, workflowRunId, workflowStateId string, stateExecutionNumber, timerCommandIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipTimerByCommandIndex", ctx, workflowId, workflowRunId, workflowStateId, stateExecutionNumber, timerCommandIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// SkipTimerByCommandIndex indicates an expected call of SkipTimerByCommandIndex.
func (mr *MockUnregisteredClientMockRecorder) SkipTimerByCommandIndex(ctx, workflowId, workflowRunId, workflowStateId, stateExecutionNumber, timerCommandIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipTimerByCommandIndex", reflect.TypeOf((*MockUnregisteredClient)(nil).SkipTimerByCommandIndex), ctx, workflowId, workflowRunId, workflowStateId, stateExecutionNumber, timerCommandIndex)
}

// StartWorkflow mocks base method.
func (m *MockUnregisteredClient) StartWorkflow(ctx context.Context, workflowType, startStateId, workflowId string, timeoutSecs int32, input any, options *iwf.UnregisteredWorkflowOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflow", ctx, workflowType, startStateId, workflowId, timeoutSecs, input, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkflow indicates an expected call of StartWorkflow.
func (mr *MockUnregisteredClientMockRecorder) StartWorkflow(ctx, workflowType, startStateId, workflowId, timeoutSecs, input, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflow", reflect.TypeOf((*MockUnregisteredClient)(nil).StartWorkflow), ctx, workflowType, startStateId, workflowId, timeoutSecs, input, options)
}

// StopWorkflow mocks base method.
func (m *MockUnregisteredClient) StopWorkflow(ctx context.Context, workflowId, workflowRunId string, options *iwf.WorkflowStopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkflow", ctx, workflowId, workflowRunId, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopWorkflow indicates an expected call of StopWorkflow.
func (mr *MockUnregisteredClientMockRecorder) StopWorkflow(ctx, workflowId, workflowRunId, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflow", reflect.TypeOf((*MockUnregisteredClient)(nil).StopWorkflow), ctx, workflowId, workflowRunId, options)
}

// UpdateWorkflowConfig mocks base method.
func (m *MockUnregisteredClient) UpdateWorkflowConfig(ctx context.Context, workflowId, workflowRunId string, config iwfidl.WorkflowConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowConfig", ctx, workflowId, workflowRunId, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowConfig indicates an expected call of UpdateWorkflowConfig.
func (mr *MockUnregisteredClientMockRecorder) UpdateWorkflowConfig(ctx, workflowId, workflowRunId, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowConfig", reflect.TypeOf((*MockUnregisteredClient)(nil).UpdateWorkflowConfig), ctx, workflowId, workflowRunId, config)
}
